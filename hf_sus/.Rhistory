Encoding(melt.data$nome_UF)
melt.data$nome_UF <- iconv(melt.data$nome_UF,from="UTF-8",to="ASCII//TRANSLIT")
# Importar as abas específicas como data frames separados
df_2021 <- read_excel(arquivo_estadual, sheet = "2021")
df_2022 <- read_excel(arquivo_estadual, sheet = "2022")
#4. Fazendo as modificações necessárias nos DFs--------
# Definir uma função para renomear as colunas
modificar_dataframe <- function(df, ano) {
# Renomear as primeiras três colunas
names(df)[1] <- 'cod_UF'
names(df)[2] <- 'UF'
names(df)[3] <- 'nome_UF'
# Obter os nomes das colunas a partir da quarta coluna
vecnames <- names(df)[-(1:3)]
# Substituir nomes que contêm números de 1 a 9 por NA
vecnames[grepl('[1-9]', vecnames)] <- NA
# Preencher valores NA com o último valor não-NA à esquerda
vecnames <- na.locf(vecnames)
# Obter os nomes originais das colunas para criar vecnames3
vecnames2 <- df[1, -(1:3)]
vecnames3 <- paste0(vecnames, '_', vecnames2)
# Atualizar os nomes das colunas a partir da quarta coluna
names(df)[-(1:3)] <- vecnames3
# Remover a primeira linha (que foi usada para obter vecnames2)
df <- df[-1, ]
# Transformar o data frame de formato largo para formato longo
melt.data <- melt(df, id.vars = c('cod_UF', 'UF', 'nome_UF'))
# Converter a coluna 'variable' para caractere
melt.data$variable <- as.character(melt.data$variable)
# Separar a coluna 'variable' em 'Fase_Despesa' e 'Natureza'
melt.data <- melt.data %>%
separate(variable, c('Fase_Despesa', 'Natureza'), '_')
# Criar a coluna 'ano'
melt.data$ano <- ano
# Converter a coluna 'value' para numérico
melt.data$value <- as.numeric(melt.data$value)
# Remover acentos da coluna 'nome_UF'
melt.data$nome_UF <- iconv(melt.data$nome_UF, from = 'UTF-8', to = 'ASCII//TRANSLIT')
return(melt.data)
}
# Lista de data frames
dfs <- list(df_2021, df_2022)
anos <- c("2021", "2022")
# Aplicar a função de renomeação a cada data frame na lista
dfs_modificados <- mapply(modificar_dataframe, dfs, anos, SIMPLIFY = F)
# Separar os data frames modificados de volta para as variáveis individuais
df_2021 <- dfs_modificados[[1]]
View(df_2021)
df_2022 <- dfs_modificados[[2]]
View(df_2022)
df_2021_2022 <- bind_rows(df_2021, df_2022)
View(df_2021_2022)
table(df_2021_2022$Natureza)
#5. Calculando a Despesa total corrente em ASPS dos Estados---------
resultado_estadual <- df_2021_2022 %>%
filter(Natureza == "Despesas correntes em ASPS") %>%
group_by(ano) %>%
summarise(total_ufs = sum(value))
View(resultado_estadual)
#5. Calculando a Despesa total corrente em ASPS dos Estados---------
resultado_estadual <- df_2021_2022 %>%
filter(Natureza == "Despesas correntes em ASPS") %>%
group_by(ano) %>%
summarise(total_ufs = round(sum(value)/10^9))
#5. Calculando a Despesa total corrente em ASPS dos Estados---------
resultado_estadual <- df_2021_2022 %>%
filter(Natureza == "Despesas correntes em ASPS") %>%
group_by(ano) %>%
summarise(total_ufs = round(sum(value)/10^9), 2)
#5. Calculando a Despesa total corrente em ASPS dos Estados---------
resultado_estadual <- df_2021_2022 %>%
filter(Natureza == "Despesas correntes em ASPS") %>%
group_by(ano) %>%
summarise(total_ufs = round(sum(value)/10^9,2))
#1. Limpando o ambiente -----------------------------
gc()
rm(list=ls())
#2. Carregar pacotes ---------------
library(readxl)
library(dplyr)
library(tidyr)
library(zoo)
library(reshape2)
#3. Importando a base --------------------------
# Diretório onde estão os arquivos xlsx
diretorio <- getwd()
dir_dados <- file.path(diretorio, "dados_estados_munics")
# Listar os arquivos no diretório de dados
arquivos <- list.files(path = dir_dados, pattern = "munic", full.names = TRUE)
arquivo_munic <- arquivos[1]
# Importar as abas específicas como data frames separados
df_2021_munic <- read_excel(arquivo_munic, sheet = "2021")
df_2022_munic <- read_excel(arquivo_munic, sheet = "2022")
View(df_2021_munic)
#4. Fazendo as modificações necessárias nos DFs--------
# Definir uma função para renomear as colunas
modificar_dataframe <- function(df, ano) {
# Renomear as primeiras três colunas
names(df)[1] <- 'cod_munic'
names(df)[2] <- 'Munic'
names(df)[3] <- 'UF'
# Obter os nomes das colunas a partir da quarta coluna
vecnames <- names(df)[-(1:3)]
# Substituir nomes que contêm números de 1 a 9 por NA
vecnames[grepl('[1-9]', vecnames)] <- NA
# Preencher valores NA com o último valor não-NA à esquerda
vecnames <- na.locf(vecnames)
# Obter os nomes originais das colunas para criar vecnames3
vecnames2 <- df[1, -(1:3)]
vecnames3 <- paste0(vecnames, '_', vecnames2)
# Atualizar os nomes das colunas a partir da quarta coluna
names(df)[-(1:3)] <- vecnames3
# Remover a primeira linha (que foi usada para obter vecnames2)
df <- df[-1, ]
# Transformar o data frame de formato largo para formato longo
melt.data <- melt(df, id.vars = c('cod_UF', 'UF', 'nome_UF'))
# Converter a coluna 'variable' para caractere
melt.data$variable <- as.character(melt.data$variable)
# Separar a coluna 'variable' em 'Fase_Despesa' e 'Natureza'
melt.data <- melt.data %>%
separate(variable, c('Fase_Despesa', 'Natureza'), '_')
# Criar a coluna 'ano'
melt.data$ano <- ano
# Converter a coluna 'value' para numérico
melt.data$value <- as.numeric(melt.data$value)
# Remover acentos da coluna 'nome_UF'
melt.data$nome_UF <- iconv(melt.data$nome_UF, from = 'UTF-8', to = 'ASCII//TRANSLIT')
return(melt.data)
}
# Lista de data frames
dfs_munic <- list(df_2021_munic, df_2022_munic)
anos <- c("2021", "2022")
# Aplicar a função de renomeação a cada data frame na lista
dfs_mounics <- mapply(modificar_dataframe_munic, dfs, anos, SIMPLIFY = F)
#4. Fazendo as modificações necessárias nos DFs--------
# Definir uma função para renomear as colunas
modificar_dataframe_munic <- function(df, ano) {
# Renomear as primeiras três colunas
names(df)[1] <- 'cod_munic'
names(df)[2] <- 'Munic'
names(df)[3] <- 'UF'
# Obter os nomes das colunas a partir da quarta coluna
vecnames <- names(df)[-(1:3)]
# Substituir nomes que contêm números de 1 a 9 por NA
vecnames[grepl('[1-9]', vecnames)] <- NA
# Preencher valores NA com o último valor não-NA à esquerda
vecnames <- na.locf(vecnames)
# Obter os nomes originais das colunas para criar vecnames3
vecnames2 <- df[1, -(1:3)]
vecnames3 <- paste0(vecnames, '_', vecnames2)
# Atualizar os nomes das colunas a partir da quarta coluna
names(df)[-(1:3)] <- vecnames3
# Remover a primeira linha (que foi usada para obter vecnames2)
df <- df[-1, ]
# Transformar o data frame de formato largo para formato longo
melt.data <- melt(df, id.vars = c('cod_UF', 'UF', 'nome_UF'))
# Converter a coluna 'variable' para caractere
melt.data$variable <- as.character(melt.data$variable)
# Separar a coluna 'variable' em 'Fase_Despesa' e 'Natureza'
melt.data <- melt.data %>%
separate(variable, c('Fase_Despesa', 'Natureza'), '_')
# Criar a coluna 'ano'
melt.data$ano <- ano
# Converter a coluna 'value' para numérico
melt.data$value <- as.numeric(melt.data$value)
# Remover acentos da coluna 'nome_UF'
melt.data$nome_UF <- iconv(melt.data$nome_UF, from = 'UTF-8', to = 'ASCII//TRANSLIT')
return(melt.data)
}
# Lista de data frames
dfs_munic <- list(df_2021_munic, df_2022_munic)
anos <- c("2021", "2022")
# Aplicar a função de renomeação a cada data frame na lista
dfs_mounics <- mapply(modificar_dataframe_munic, dfs, anos, SIMPLIFY = F)
# Aplicar a função de renomeação a cada data frame na lista
dfs_mounics <- mapply(modificar_dataframe_munic, dfs_munic, anos, SIMPLIFY = F)
#4. Fazendo as modificações necessárias nos DFs--------
# Definir uma função para renomear as colunas
modificar_dataframe_munic <- function(df, ano) {
# Renomear as primeiras três colunas
names(df)[1] <- 'cod_munic'
names(df)[2] <- 'Munic'
names(df)[3] <- 'UF'
# Obter os nomes das colunas a partir da quarta coluna
vecnames <- names(df)[-(1:3)]
# Substituir nomes que contêm números de 1 a 9 por NA
vecnames[grepl('[1-9]', vecnames)] <- NA
# Preencher valores NA com o último valor não-NA à esquerda
vecnames <- na.locf(vecnames)
# Obter os nomes originais das colunas para criar vecnames3
vecnames2 <- df[1, -(1:3)]
vecnames3 <- paste0(vecnames, '_', vecnames2)
# Atualizar os nomes das colunas a partir da quarta coluna
names(df)[-(1:3)] <- vecnames3
# Remover a primeira linha (que foi usada para obter vecnames2)
df <- df[-1, ]
# Transformar o data frame de formato largo para formato longo
melt.data <- melt(df, id.vars = c('cod_munic', 'Munic', 'UF'))
# Converter a coluna 'variable' para caractere
melt.data$variable <- as.character(melt.data$variable)
# Separar a coluna 'variable' em 'Fase_Despesa' e 'Natureza'
melt.data <- melt.data %>%
separate(variable, c('Fase_Despesa', 'Natureza'), '_')
# Criar a coluna 'ano'
melt.data$ano <- ano
# Converter a coluna 'value' para numérico
melt.data$value <- as.numeric(melt.data$value)
# Remover acentos da coluna 'nome_UF'
melt.data$Munic <- iconv(melt.data$Munic, from = 'UTF-8', to = 'ASCII//TRANSLIT')
return(melt.data)
}
# Lista de data frames
dfs_munic <- list(df_2021_munic, df_2022_munic)
anos <- c("2021", "2022")
# Aplicar a função de renomeação a cada data frame na lista
dfs_mounics <- mapply(modificar_dataframe_munic, dfs_munic, anos, SIMPLIFY = F)
# Separar os data frames modificados de volta para as variáveis individuais
df_2021_munic <- dfs_mounics[[1]]
df_2022_munic <- dfs_mounics[[2]]
View(df_2021_munic)
table(df_2021_munic$Natureza)
df_2021_2022_munic <- bind_rows(df_2021_munic, df_2022_munic)
#5. Calculando a Despesa total corrente em ASPS dos Estados---------
resultado_municipal <- df_2021_2022_munic %>%
filter(Natureza == "Despesas correntes em ASPS") %>%
group_by(ano) %>%
summarise(total_munics = round(sum(value)/10^9,2))
View(resultado_municipal)
gc()
rm(list=ls())
print("Ambiente Limpo")
library(readxl)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(zoo)
library(reshape2)
diretorio <- getwd()
lista_dfs <- list()
arquivos <- list.files(diretorio, pattern = "\\.xlsx$", full.names = TRUE)
for (arquivo in arquivos) {
# Ler o arquivo xlsx
df <- read_excel(arquivo)
# Determinar a origem do orçamento
if (grepl("EDUCACAO", basename(arquivo), ignore.case = TRUE)) {
origem <- "EDUCACAO"
} else if (grepl("SAUDE", basename(arquivo), ignore.case = TRUE)) {
origem <- "SAUDE"
} else {
origem <- "OUTRO"
}
# Adicionar a coluna ORIGEM_ORÇAMENTO
df <- mutate(df, ORIGEM_ORÇAMENTO = origem)
# Adicionar o data frame modificado à lista
lista_dfs[[length(lista_dfs) + 1]] <- df
}
# Concatenar todos os data frames em um único data frame
df_final <- bind_rows(lista_dfs)
rm(df, lista_dfs)
teste_despesas <- df_final %>%
group_by(`Ano Lançamento`, ORIGEM_ORÇAMENTO) %>%
summarise(sum(`DESPESAS PAGAS`, na.rm = T))
rm(teste_despesas)
gc()
HUs_ <- df_final %>%
filter(UO_Orgao_Maximo == "MINISTERIO DA EDUCACAO") %>%
select("UG_Executora_COD", "UG_Executora") %>%
filter(grepl("HOSP|COMPLEXO HOSP|EBSERH|MATERNIDADE|DOENCAS DO TORAX DA UFRJ|GINECOLOGIA DA UFRJ|DEOLINDO COUTO DA UFRJ|PSIQUIATRIA DA UFRJ|PUERIC. PED MAT. GESTEIRA DA UFRJ|HUSM", UG_Executora) & !grepl("EXERCITO|MILITAR", UG_Executora)) %>%
unique()
HUs_renamed <- HUs_ %>%
rename('Código UF Executora' = UG_Executora_COD, 'UG Executora' = UG_Executora)
kable(HUs_renamed, caption = "Tabela 1 - Lista de Hospitais Universitários") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F,
position = "center")
SHA_Uniao_MEC_acoes <- df_final %>%
filter(UO_Orgao_Maximo == "MINISTERIO DA EDUCACAO") %>%
select(`Ano Lançamento`,UG_Executora_COD, UG_Executora, Subfuncao_COD, Acao_Cod, Categoria_Economica_Despesa_COD, `DESPESAS PAGAS`, `RESTOS A PAGAR PROCESSADOS PAGOS`, `RESTOS A PAGAR NAO PROCESSADOS PAGOS`) %>%
filter(Categoria_Economica_Despesa_COD %in% "3") %>%
filter(UG_Executora_COD %in% HUs_$UG_Executora_COD | Acao_Cod %in% c("20RX", "4086")) %>%
mutate_at(c("DESPESAS PAGAS", "RESTOS A PAGAR PROCESSADOS PAGOS", "RESTOS A PAGAR NAO PROCESSADOS PAGOS"), ~replace_na(.,0)) %>%
mutate(resultado = `DESPESAS PAGAS` + `RESTOS A PAGAR PROCESSADOS PAGOS` + `RESTOS A PAGAR NAO PROCESSADOS PAGOS`) %>%
select(`Ano Lançamento`, resultado) %>%
group_by(`Ano Lançamento`) %>%
summarise(resultado_final_mec = round(sum(resultado),2))
SHA_Uniao <- df_final %>%
filter(UO_Orgao_Maximo == "MINISTERIO DA SAUDE") %>%
select(`Ano Lançamento`, Fonte_Recursos_Detalhada_COD, Iduso_COD, Unidade_Orcamentaria_COD, Unidade_Orcamentaria, UG_Executora_COD, UG_Executora, Subfuncao_COD, Acao_Cod, Categoria_Economica_Despesa_COD, Modalidade_Aplicacao_COD ,`DESPESAS PAGAS`, `RESTOS A PAGAR PROCESSADOS PAGOS`, `RESTOS A PAGAR NAO PROCESSADOS PAGOS`) %>%
filter(Categoria_Economica_Despesa_COD %in% "3") %>%
filter(Iduso_COD == 6 | (Acao_Cod == "2004" & Unidade_Orcamentaria_COD %in% c("36901", "36211", "36213", "36212")) | Acao_Cod %in% c("20G8", "20YS", "217U", "20YL") | Modalidade_Aplicacao_COD == "70" | Fonte_Recursos_Detalhada_COD %in% c("0142000000", "6142000000", "6342000000", "0142369010", "0342369010", "6142369010") | (Unidade_Orcamentaria_COD %in% c("36212", "36213") & Acao_Cod != "2004")) %>%
mutate_at(c("DESPESAS PAGAS", "RESTOS A PAGAR PROCESSADOS PAGOS", "RESTOS A PAGAR NAO PROCESSADOS PAGOS"), ~replace_na(.,0)) %>%
mutate(resultado = `DESPESAS PAGAS` + `RESTOS A PAGAR PROCESSADOS PAGOS` + `RESTOS A PAGAR NAO PROCESSADOS PAGOS`) %>%
select(`Ano Lançamento`, resultado) %>%
group_by(`Ano Lançamento`) %>%
summarise(resultado_final_uniao_sus = round(sum(resultado),2))
#Importando a base --------------------------
# Diretório onde estão os arquivos xlsx
diretorio <- getwd()
dir_dados <- file.path(diretorio, "dados_estados_munics")
# Listar os arquivos no diretório de dados
arquivos <- list.files(path = dir_dados, pattern = "estadual", full.names = TRUE)
arquivo_estadual <- arquivos[1]
# Importar as abas específicas como data frames separados
df_2021 <- read_excel(arquivo_estadual, sheet = "2021")
df_2022 <- read_excel(arquivo_estadual, sheet = "2022")
#Fazendo as modificações necessárias nos DFs--------
# Definir uma função para renomear as colunas
modificar_dataframe <- function(df, ano) {
# Renomear as primeiras três colunas
names(df)[1] <- 'cod_UF'
names(df)[2] <- 'UF'
names(df)[3] <- 'nome_UF'
# Obter os nomes das colunas a partir da quarta coluna
vecnames <- names(df)[-(1:3)]
# Substituir nomes que contêm números de 1 a 9 por NA
vecnames[grepl('[1-9]', vecnames)] <- NA
# Preencher valores NA com o último valor não-NA à esquerda
vecnames <- na.locf(vecnames)
# Obter os nomes originais das colunas para criar vecnames3
vecnames2 <- df[1, -(1:3)]
vecnames3 <- paste0(vecnames, '_', vecnames2)
# Atualizar os nomes das colunas a partir da quarta coluna
names(df)[-(1:3)] <- vecnames3
# Remover a primeira linha (que foi usada para obter vecnames2)
df <- df[-1, ]
# Transformar o data frame de formato largo para formato longo
melt.data <- melt(df, id.vars = c('cod_UF', 'UF', 'nome_UF'))
# Converter a coluna 'variable' para caractere
melt.data$variable <- as.character(melt.data$variable)
# Separar a coluna 'variable' em 'Fase_Despesa' e 'Natureza'
melt.data <- melt.data %>%
separate(variable, c('Fase_Despesa', 'Natureza'), '_')
# Criar a coluna 'ano'
melt.data$ano <- ano
# Converter a coluna 'value' para numérico
melt.data$value <- as.numeric(melt.data$value)
# Remover acentos da coluna 'nome_UF'
melt.data$nome_UF <- iconv(melt.data$nome_UF, from = 'UTF-8', to = 'ASCII//TRANSLIT')
return(melt.data)
}
# Lista de data frames
dfs <- list(df_2021, df_2022)
anos <- c("2021", "2022")
# Aplicar a função de renomeação a cada data frame na lista
dfs_modificados <- mapply(modificar_dataframe, dfs, anos, SIMPLIFY = F)
# Separar os data frames modificados de volta para as variáveis individuais
df_2021 <- dfs_modificados[[1]]
df_2022 <- dfs_modificados[[2]]
df_2021_2022 <- bind_rows(df_2021, df_2022)
#Calculando a Despesa total corrente em ASPS dos Estados---------
resultado_estadual <- df_2021_2022 %>%
filter(Natureza == "Despesas correntes em ASPS") %>%
group_by(ano) %>%
summarise(total_ufs = round(sum(value)/10^9,2))
#Importando a base --------------------------
# Diretório onde estão os arquivos xlsx
diretorio <- getwd()
dir_dados <- file.path(diretorio, "dados_estados_munics")
# Listar os arquivos no diretório de dados
arquivos <- list.files(path = dir_dados, pattern = "munic", full.names = TRUE)
arquivo_munic <- arquivos[1]
# Importar as abas específicas como data frames separados
df_2021_munic <- read_excel(arquivo_munic, sheet = "2021")
df_2022_munic <- read_excel(arquivo_munic, sheet = "2022")
#Fazendo as modificações necessárias nos DFs--------
# Definir uma função para renomear as colunas
modificar_dataframe_munic <- function(df, ano) {
# Renomear as primeiras três colunas
names(df)[1] <- 'cod_munic'
names(df)[2] <- 'Munic'
names(df)[3] <- 'UF'
# Obter os nomes das colunas a partir da quarta coluna
vecnames <- names(df)[-(1:3)]
# Substituir nomes que contêm números de 1 a 9 por NA
vecnames[grepl('[1-9]', vecnames)] <- NA
# Preencher valores NA com o último valor não-NA à esquerda
vecnames <- na.locf(vecnames)
# Obter os nomes originais das colunas para criar vecnames3
vecnames2 <- df[1, -(1:3)]
vecnames3 <- paste0(vecnames, '_', vecnames2)
# Atualizar os nomes das colunas a partir da quarta coluna
names(df)[-(1:3)] <- vecnames3
# Remover a primeira linha (que foi usada para obter vecnames2)
df <- df[-1, ]
# Transformar o data frame de formato largo para formato longo
melt.data <- melt(df, id.vars = c('cod_munic', 'Munic', 'UF'))
# Converter a coluna 'variable' para caractere
melt.data$variable <- as.character(melt.data$variable)
# Separar a coluna 'variable' em 'Fase_Despesa' e 'Natureza'
melt.data <- melt.data %>%
separate(variable, c('Fase_Despesa', 'Natureza'), '_')
# Criar a coluna 'ano'
melt.data$ano <- ano
# Converter a coluna 'value' para numérico
melt.data$value <- as.numeric(melt.data$value)
# Remover acentos da coluna 'nome_UF'
melt.data$Munic <- iconv(melt.data$Munic, from = 'UTF-8', to = 'ASCII//TRANSLIT')
return(melt.data)
}
# Lista de data frames
dfs_munic <- list(df_2021_munic, df_2022_munic)
anos <- c("2021", "2022")
# Aplicar a função de renomeação a cada data frame na lista
dfs_mounics <- mapply(modificar_dataframe_munic, dfs_munic, anos, SIMPLIFY = F)
# Separar os data frames modificados de volta para as variáveis individuais
df_2021_munic <- dfs_mounics[[1]]
df_2022_munic <- dfs_mounics[[2]]
df_2021_2022_munic <- bind_rows(df_2021_munic, df_2022_munic)
#Calculando a Despesa total corrente em ASPS dos Estados---------
resultado_municipal <- df_2021_2022_munic %>%
filter(Natureza == "Despesas correntes em ASPS") %>%
group_by(ano) %>%
summarise(total_munics = round(sum(value)/10^9,2))
View(resultado_estadual)
View(resultado_municipal)
View(SHA_Uniao)
View(SHA_Uniao_MEC_acoes)
SHA_Uniao <- SHA_Uniao %>%
rename("ano" = 'Ano Lançamento')
SHA_Uniao_MEC_acoes <- SHA_Uniao_MEC_acoes %>%
rename("ano" = 'Ano Lançamento')
resultado <- cbind(SHA_Uniao, SHA_Uniao_MEC_acoes, resultado_estadual, resultado_municipal)
View(resultado)
resultado <- resultado[, c(1, 2, 4, 6, 8)]
SHA_Uniao <- SHA_Uniao %>%
rename("ano" = 'Ano Lançamento') %>%
mutate(resultado_final_uniao_sus = round(resultado_final_uniao_sus/10^9, 2))
SHA_Uniao <- df_final %>%
filter(UO_Orgao_Maximo == "MINISTERIO DA SAUDE") %>%
select(`Ano Lançamento`, Fonte_Recursos_Detalhada_COD, Iduso_COD, Unidade_Orcamentaria_COD, Unidade_Orcamentaria, UG_Executora_COD, UG_Executora, Subfuncao_COD, Acao_Cod, Categoria_Economica_Despesa_COD, Modalidade_Aplicacao_COD ,`DESPESAS PAGAS`, `RESTOS A PAGAR PROCESSADOS PAGOS`, `RESTOS A PAGAR NAO PROCESSADOS PAGOS`) %>%
filter(Categoria_Economica_Despesa_COD %in% "3") %>%
filter(Iduso_COD == 6 | (Acao_Cod == "2004" & Unidade_Orcamentaria_COD %in% c("36901", "36211", "36213", "36212")) | Acao_Cod %in% c("20G8", "20YS", "217U", "20YL") | Modalidade_Aplicacao_COD == "70" | Fonte_Recursos_Detalhada_COD %in% c("0142000000", "6142000000", "6342000000", "0142369010", "0342369010", "6142369010") | (Unidade_Orcamentaria_COD %in% c("36212", "36213") & Acao_Cod != "2004")) %>%
mutate_at(c("DESPESAS PAGAS", "RESTOS A PAGAR PROCESSADOS PAGOS", "RESTOS A PAGAR NAO PROCESSADOS PAGOS"), ~replace_na(.,0)) %>%
mutate(resultado = `DESPESAS PAGAS` + `RESTOS A PAGAR PROCESSADOS PAGOS` + `RESTOS A PAGAR NAO PROCESSADOS PAGOS`) %>%
select(`Ano Lançamento`, resultado) %>%
group_by(`Ano Lançamento`) %>%
summarise(resultado_final_uniao_sus = round(sum(resultado),2))
SHA_Uniao <- SHA_Uniao %>%
rename("ano" = 'Ano Lançamento') %>%
mutate(resultado_final_uniao_sus = round(resultado_final_uniao_sus/10^9, 2))
View(SHA_Uniao)
SHA_Uniao_MEC_acoes <- df_final %>%
filter(UO_Orgao_Maximo == "MINISTERIO DA EDUCACAO") %>%
select(`Ano Lançamento`,UG_Executora_COD, UG_Executora, Subfuncao_COD, Acao_Cod, Categoria_Economica_Despesa_COD, `DESPESAS PAGAS`, `RESTOS A PAGAR PROCESSADOS PAGOS`, `RESTOS A PAGAR NAO PROCESSADOS PAGOS`) %>%
filter(Categoria_Economica_Despesa_COD %in% "3") %>%
filter(UG_Executora_COD %in% HUs_$UG_Executora_COD | Acao_Cod %in% c("20RX", "4086")) %>%
mutate_at(c("DESPESAS PAGAS", "RESTOS A PAGAR PROCESSADOS PAGOS", "RESTOS A PAGAR NAO PROCESSADOS PAGOS"), ~replace_na(.,0)) %>%
mutate(resultado = `DESPESAS PAGAS` + `RESTOS A PAGAR PROCESSADOS PAGOS` + `RESTOS A PAGAR NAO PROCESSADOS PAGOS`) %>%
select(`Ano Lançamento`, resultado) %>%
group_by(`Ano Lançamento`) %>%
summarise(resultado_final_mec = round(sum(resultado),2))
SHA_Uniao_MEC_acoes <- SHA_Uniao_MEC_acoes %>%
rename("ano" = 'Ano Lançamento') %>%
mutate(resultado_final_mec = round(resultado_final_mec/10^9,2))
View(SHA_Uniao_MEC_acoes)
resultado <- cbind(SHA_Uniao, SHA_Uniao_MEC_acoes, resultado_estadual, resultado_municipal)
View(resultado)
resultado <- resultado[, c(1, 2, 4, 6, 8)]
resultado$total <- rowSums(resultado[,2:5])
resultado_renamed <- resultado %>%
rename("Ano" = ano, "MS" = resultado_final_uniao_sus, "MEC" = resultado_final_mec, "Total Estadual" = total_ufs, "Total Municípios" = total_munic ,"Total" = total)
resultado_renamed <- resultado %>%
rename("Ano" = ano, "MS" = resultado_final_uniao_sus, "MEC" = resultado_final_mec, "Total Estadual" = total_ufs, "Total Municípios" = total_munics ,"Total" = total)
View(resultado_renamed)
kable(resultado_renamed, caption = "Tabela 2 - Estimativas Despesas Sistema Único de Saúde (HF.1.1.1)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F,
position = "center")
library(ggplot2)
dados_grafico <- resultado_renamed %>%
pivot_longer(cols = c(MS, MEC, `Total Estadual`, `Total Municípios`),
names_to = "Parte",
values_to = "Valor") %>%
group_by(Ano) %>%
mutate(Total_ano = sum(Valor),
Share = Valor / Total_ano * 100) %>%
ungroup()
plot_participacao <- ggplot(dados_grafico, aes(x = factor(Ano), y = Share, fill = Parte)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Participação de Cada Parte no Total por Ano",
x = "Ano",
y = "Participação (%)",
fill = "Parte") +
theme_minimal()
print(plot_participacao)
cores_pastel <- c("MS" = "#FFB3BA", "MEC" = "#FFDFBA", "Total Estadual" = "#FFFFBA", "Total Municípios" = "#BAFFC9")
plot_participacao <- ggplot(dados_grafico, aes(x = factor(Ano), y = Share, fill = Parte)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = sprintf("%.1f%%", Share)),
position = position_stack(vjust = 0.5), size = 3) +
labs(title = "Participação relativa na composição do gasto SUS (HF.1.1.1)",
x = "Ano",
y = "Participação (%)",
fill = "Parte") +
scale_fill_manual(values = cores_pastel) +
theme_minimal()
print(plot_participacao)
print(plot_participacao)
print(plot_participacao)
install.packages('tinytex')
tinytex::install_tinytex()
tinytex::pdflatex('test.tex')
tinytex::pdflatex('test.tex')
tinytex::install_tinytex()
Y
tinytex::install_tinytex()
y
tinytex::install_tinytex()
yes
library(tinytex)
tinytex::pdflatex('test.tex')
